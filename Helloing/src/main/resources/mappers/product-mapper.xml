<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="productMapper">

    <resultMap id="AccommResultSet" type="accomm">
        <result column="ACCOMM_NO"       	property="accommNo" />
        <result column="BUSINESS_NO"   		property="businessNo" />
        <result column="ACCOMM_NAME"  		property="accommName" />
        <result column="ADDRESS"    		property="address" />
        <result column="LAT"    			property="lat" />
        <result column="LNG"    			property="lng" />
        <result column="GRADE"    			property="grade" />
        <result column="REFUND"    			property="refund" />
        <result column="CHECKINOUT"    		property="checkInout" />
        <result column="END_DATE"    		property="endDate" />
        <result column="ACCOMM_CONTENT"		property="accommContent" />
        <result column="CATEGORY"    		property="category" />
        <result column="AVG"    			property="avg" />
        <result column="REVIEWCOUNT"    	property="reviewCount" />
        <result column="ROWPRICE"    		property="rowPrice" />
        <result column="STAR1"    			property="star1" />
        <result column="STAR2"    			property="star2" />
        <result column="STAR3"    			property="star3" />
        <result column="STAR4"    			property="star4" />
        <result column="STAR5"    			property="star5" />
        <result column="ATTACHMENT"    		property="attachment" />
        <result column="FILEPATH"    		property="filePath" />
        <result column="STATUS"    			property="status" />
    </resultMap>

     <resultMap id="RoomResultSet"  type="room">
        <result column="ROOM_NO"        property="roomNo" />
        <result column="ACCOMM_NO"   	property="accommNo" />
        <result column="ROOM_NAME"  	property="roomName" />
        <result column="CAPACITY"   	property="capacity" />
        <result column="PRICE"  		property="price" />
        <result column="STATUS"    		property="status" />
        <result column="ATTACHMENT"    	property="attachment" />
    </resultMap>	
    
	<resultMap id="ActivityResultSet" type="activity">
        <result column="ACTIVITY_NO"       	property="activityNo" />
        <result column="ACTIVITY_NAME"    	property="activityName" />
        <result column="BUSINESS_NO"   		property="businessNo" />
        <result column="ACTIVITY_CONTENT"  	property="activityContent" />
        <result column="END_DATE"    		property="endDate" />
        <result column="REVIEWCOUNT"    	property="reviewCount" />
        <result column="ROWPRICE"    		property="rowPrice" />
        <result column="AVG"    			property="avg" />
        <result column="STAR1"    			property="star1" />
        <result column="STAR2"    			property="star2" />
        <result column="STAR3"    			property="star3" />
        <result column="STAR4"    			property="star4" />
        <result column="STAR5"    			property="star5" />
        <result column="ATTACHMENT"    		property="attachment" />
        <result column="STATUS"    			property="status" />
        <result column="FILEPATH"    		property="filePath" />
    </resultMap>
    
    <resultMap id="TicketResultSet" type="ticket">
        <result column="TICKET_NO"       	property="ticketNo" />
        <result column="ACTIVITY_NO"    	property="activityNo" />
        <result column="TICKET_NAME"   		property="ticketName" />
        <result column="CAPACITY"  			property="capacity" />
        <result column="PRICE"    			property="price" />
        <result column="START_DATE"    		property="startDate" />
        <result column="END_DATE"    		property="endDate" />
        <result column="COUNT"    			property="count" />
        <result column="STATUS"    			property="status" />
    </resultMap>
    
     <resultMap id="AttachmentResultSet"  type="attachment">
        <result column="ACCOMM_NO"      property="accommNo" />
        <result column="ACTIVITY_NO"   	property="activityNo" />
        <result column="ROOM_NO"  		property="roomNo" />
        <result column="FILE_NO"    	property="fileNo" />
        <result column="ORIGIN_NAME"    property="originName" />
        <result column="CHANGE_NAME"    property="changeName" />
        <result column="FILE_PATH"    	property="filePath" />
        <result column="UPLOAD_DATE"    property="uploadDate" />
        <result column="ATTACHMENT"   	property="attachment" />
    </resultMap>
    
    <resultMap id="ActReviewResultSet"  type="actReview">
        <result column="REVIEW_NO"       property="reviewNo" />
        <result column="ACTIVITY_NO"  	 property="activityNo" />
        <result column="TICKET_NO"  	 property="ticketNo" />
        <result column="MEM_NO"    	 	 property="memNo" />
        <result column="REVIEW_CONTENT"  property="reviewContent" />
        <result column="CREATE_DATE"     property="createDate" />
        <result column="TAG"    		 property="tag" />
        <result column="STAR"    		 property="star" />
        <result column="MEM_NAME"    	 property="memName" />
        <result column="TICKET_NAME"     property="ticketName" />
    </resultMap>
    
    <resultMap id="AcReviewResultSet"  type="acReview">
        <result column="REVIEW_NO"       property="reviewNo" />
        <result column="ACCOMM_NO"  	 property="accommNo" />
        <result column="MEM_NO"    		 property="memNo" />
        <result column="ROOM_NO"   		 property="roomNo" />
        <result column="REVIEW_CONTENT"  property="reviewContent" />
        <result column="CREATE_DATE"     property="createDate" />
        <result column="TAG"   			 property="tag" />
        <result column="STAR"    		 property="star" />
        <result column="MEM_NAME"        property="memName" />
        <result column="ROOM_NAME"   	 property="roomName" />
        <result column="FILE_PATH"   	 property="filePath" />
    </resultMap>
    
	<resultMap id="actWishResultSet" type="activitywish">
		<result column="WISH_DATE"		property="wishDate" />
		<result column="ACTIVITY_NO" 	property="activityNo" />
		<result column="MEM_NO" 		property="memNo" />
	</resultMap>
	
	<resultMap id="acWishResultSet" type="accommwish">
		<result column="WISH_DATE"	property="wishDate" />
		<result column="ACCOMM_NO" 	property="accommNo" />
		<result column="MEM_NO" 	property="memNo" />
	</resultMap>

	<!-- 액티비티 메인에 쀼려줄 액티비티 리스트들 -->
	<select id="selectActList" resultMap="ActivityResultSet">
		SELECT
		       A.ACTIVITY_NO
		      ,ACTIVITY_NAME
		      ,( SELECT COUNT(*) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = A.ACTIVITY_NO ) AS REVIEWCOUNT
		      ,( SELECT MIN(PRICE) FROM TICKET WHERE ACTIVITY_NO = A.ACTIVITY_NO) AS ROWPRICE
              ,FILEPATH
		  FROM
		       ACTIVITY A
          JOIN 
              (SELECT 
                      ACTIVITY_NO, 
                      MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
                 FROM  
            	      ACTIVITY_ATTACHMENT
                GROUP 
            	   BY 
            		  ACTIVITY_NO) AT ON (AT.ACTIVITY_NO = A.ACTIVITY_NO)
		 WHERE
		       <![CDATA[SYSDATE < END_DATE]]> 
		   AND
		   	   STATUS = 'Y'
	</select>

	<!-- 액티비티 상세 정보 -->
	<select id="selectActDetail" resultMap="ActivityResultSet" parameterType="_int">
		SELECT
			   A.ACTIVITY_NO
			  ,ACTIVITY_NAME
			  ,BUSINESS_NO
			  ,ACTIVITY_CONTENT
			  ,TO_CHAR(END_DATE, 'YYYY.MM.DD') AS END_DATE
			  ,(SELECT MIN(PRICE) FROM TICKET WHERE ACTIVITY_NO = A.ACTIVITY_NO) AS "ROWPRICE"
			  ,(SELECT AVG(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo }) AS "AVG"
			  ,(SELECT COUNT(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo } AND STAR = 1) AS "STAR1"
			  ,(SELECT COUNT(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo } AND STAR = 2) AS "STAR2"
			  ,(SELECT COUNT(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo } AND STAR = 3) AS "STAR3"
			  ,(SELECT COUNT(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo } AND STAR = 4) AS "STAR4"
			  ,(SELECT COUNT(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = #{ activityNo } AND STAR = 5) AS "STAR5"
		  FROM
		  	   ACTIVITY A
		 WHERE
		 	   A.ACTIVITY_NO = #{ activityNo }
	</select>
	
	<!-- 해당 액티비티에 딸린 티켓들 -->
	<select id="selectTicketList" resultMap="TicketResultSet" parameterType="_int">
		SELECT
			   TICKET_NO
			  ,ACTIVITY_NO
			  ,TICKET_NAME
			  ,CAPACITY
			  ,PRICE
			  ,TO_CHAR(START_DATE, 'YYYY.MM.DD') AS START_DATE
			  ,TO_CHAR(END_DATE, 'YYYY.MM.DD') AS END_DATE
		  FROM
		  	   TICKET
		 WHERE
		 	   ACTIVITY_NO = #{ activityNo }
		   AND
		       <![CDATA[CAPACITY > 0]]>
	</select>
	
	<!-- 액티비티에 달린 리뷰들 -->
	<select id="selectReviewList" resultMap="ActReviewResultSet" parameterType="_int">
		SELECT
			   REVIEW_NO
			  ,AR.ACTIVITY_NO
			  ,TICKET_NAME
			  ,substr(MEM_NAME,1,1) || lpad('*',length(MEM_NAME)-2,'*') || substr(MEM_NAME, length(MEM_NAME), 1) AS MEM_NAME
			  ,REVIEW_CONTENT
			  ,TO_CHAR(CREATE_DATE, 'YYYY.MM.DD') AS CREATE_DATE
			  ,TAG
			  ,STAR
			  ,FILE_PATH
		  FROM
		  	   ACTIVITY_REVIEW AR
		  JOIN
		  	   MEMBER USING (MEM_NO)
		  JOIN
		  	   TICKET USING (TICKET_NO)
		 WHERE
		 	   AR.ACTIVITY_NO = #{ activityNo }
		 ORDER
		    BY
		       REVIEW_NO DESC
	</select>
	<!-- 위시에 추가한 액티비티인지 확인 -->
	<select id="checkActWish" resultMap="actWishResultSet" parameterType="activity">
		SELECT
			   ACTIVITY_NO
			  ,MEM_NO
			  ,WISH_DATE
		  FROM
		  	   ACTIVITY_WISH
		 WHERE
		 	   ACTIVITY_NO = #{ activityNo }
		   AND
		   	   MEM_NO = #{ memNo }
	</select>
	
	<!-- 티켓 구매하기 -->
	<insert id="insertTicketPayment" parameterType="java.util.List">
		<foreach collection="list" item="item" separator="" index="index" open="INSERT ALL" close="SELECT * FROM SYS.DUAL">
			INTO
				   TICKET_PAYMENT
			  	   (
			  	    ORDER_NO
			  	   ,MEM_NO
			  	   ,TICKET_NO
			  	   ,COUNT
			  	   ,PAYMENT_AMOUNT
			  	   )
			VALUES
				   (
				   <if test="index == 0">
				   	   SEQ_TICKET_ORDER.NEXTVAL
				   </if>
				   <if test="index > 0">
				       SEQ_TICKET_ORDER.CURRVAL
				   </if>
				   ,#{ item.memNo }
				   ,#{ item.ticketNo }
				   ,#{ item.count }
				   ,#{ item.paymentAmount }
				   )
		</foreach>
	</insert>
	
	<!-- 티켓 카운트 감소 -->
	<update id="decreaseCount" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=";" index="index" open="DECLARE BEGIN" close=";END;">
			UPDATE 
			       TICKET
			   SET
			   	   CAPACITY = CAPACITY - #{ item.count }
			 WHERE
			 	   TICKET_NO = #{ item.ticketNo }
		</foreach>
	</update>
	
	<!-- 숙소 메인에 뿌려줄 숙소 리스트들 --> <!-- 첨부파일도 넣어줘야함 -->
	<select id="selectAcList" resultMap="AccommResultSet">
		SELECT
		       A.ACCOMM_NO
		      ,A.ACCOMM_NAME
		      ,A.CATEGORY
		      ,A.ADDRESS
		      ,(SELECT COUNT(*) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS REVIEWCOUNT
		      ,(SELECT MIN(PRICE) FROM ROOM WHERE ACCOMM_NO = A.ACCOMM_NO) AS ROWPRICE
		      ,(SELECT AVG(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS AVG
		      ,FILEPATH
		  FROM
		       ACCOMM A
		  JOIN
		       (SELECT 
                      ACCOMM_NO, 
                      MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
                 FROM  
            	      ACCOMM_ATTACHMENT
                GROUP 
            	   BY 
            		  ACCOMM_NO) AT ON (AT.ACCOMM_NO = A.ACCOMM_NO)
		  WHERE
		       <![CDATA[SYSDATE < END_DATE]]> 
		   AND
		   	   STATUS = 'Y'
	</select>
	
	<!-- 숙소 상세 조회 -->
	<select id="selectAcDetail" resultMap="AccommResultSet" parameterType="_int">
		SELECT
			   ACCOMM_NO
			  ,BUSINESS_NO
			  ,ACCOMM_NAME
			  ,ADDRESS
			  ,LAT
			  ,LNG
			  ,GRADE
			  ,REFUND
			  ,END_DATE
			  ,ACCOMM_CONTENT
			  ,CATEGORY
			  ,CHECKINOUT
			  ,(SELECT AVG(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS AVG
			  ,(SELECT COUNT(*) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS REVIEWCOUNT
			  ,(SELECT MIN(PRICE) FROM ROOM WHERE ACCOMM_NO = A.ACCOMM_NO) AS ROWPRICE
			  ,(SELECT COUNT(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = #{ accommNo } AND STAR = 1) AS "STAR1"
			  ,(SELECT COUNT(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = #{ accommNo } AND STAR = 2) AS "STAR2"
			  ,(SELECT COUNT(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = #{ accommNo } AND STAR = 3) AS "STAR3"
			  ,(SELECT COUNT(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = #{ accommNo } AND STAR = 4) AS "STAR4"
			  ,(SELECT COUNT(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = #{ accommNo } AND STAR = 5) AS "STAR5"
		  FROM
		       ACCOMM A
         WHERE
         	   ACCOMM_NO = #{ accommNo }
	</select>
	
	<!-- 숙소에 첨부된 첨부파일 -->
	<select id="selectPhotoList" resultMap="AttachmentResultSet" parameterType="_int">
		SELECT
			  FILE_PATH || CHANGE_NAME AS ATTACHMENT
		  FROM
		       ACCOMM A
		  JOIN
		       ACCOMM_ATTACHMENT AT ON (AT.ACCOMM_NO = A.ACCOMM_NO)
         WHERE
         	   A.ACCOMM_NO = #{ accommNo }
	</select>
	
	<!-- 객실에 첨부된 첨부파일 -->
	<select id="selectRoomPhotoList" resultMap="AttachmentResultSet" parameterType="_int">
		SELECT
			  FILE_PATH || CHANGE_NAME AS ATTACHMENT
		  FROM
		       ROOM R
		  JOIN
		       ROOM_ATTACHMENT RT ON (R.ROOM_NO = RT.ROOM_NO)
         WHERE
         	   RT.ROOM_NO = #{ roomNo }
	</select>
	
	<!-- 액티비티에 첨부된 첨부파일 -->
	<select id="selectActPhotoList" resultMap="AttachmentResultSet" parameterType="_int">
		SELECT
			  FILE_PATH || CHANGE_NAME AS ATTACHMENT
		  FROM
		       ACTIVITY A
		  JOIN
		       ACTIVITY_ATTACHMENT AT ON (AT.ACTIVITY_NO = A.ACTIVITY_NO)
         WHERE
         	   A.ACTIVITY_NO = #{ activityNo }
         ORDER
            BY
               FILE_NO
	</select>
	
	<!-- 숙소에 등록된 객실 리스트 조회 -->
	<select id="selectRoomList" resultMap="RoomResultSet" parameterType="_int">
		SELECT
		       R.ROOM_NO
		      ,R.ACCOMM_NO
		      ,R.ROOM_NAME
		      ,R.CAPACITY
		      ,R.PRICE
		      ,RT.FILE_PATH || RT.CHANGE_NAME AS ATTACHMENT
		  FROM
		  	   ROOM R
		  JOIN
		       ROOM_ATTACHMENT RT ON (RT.ROOM_NO = R.ROOM_NO)
		 WHERE
		 	   R.ACCOMM_NO = #{ accommNo }
	</select>
	<!-- 숙소에 등록된 리뷰 조회 -->
	<select id="selectAcReviewList" resultMap="AcReviewResultSet" parameterType="_int">
		SELECT
			   REVIEW_NO
			  ,AR.ACCOMM_NO
			  ,substr(MEM_NAME,1,1) || lpad('*',length(MEM_NAME)-2,'*') || substr(MEM_NAME, length(MEM_NAME), 1) AS MEM_NAME
			  ,AR.ROOM_NO
			  ,ROOM_NAME
			  ,REVIEW_CONTENT
			  ,TO_CHAR(CREATE_DATE, 'YYYY.MM.DD') AS CREATE_DATE
			  ,TAG
			  ,STAR
              ,ORIGIN_NAME
              ,FILE_PATH
		  FROM
		       ACCOMM_REVIEW AR
		  JOIN
		  	   MEMBER USING (MEM_NO)
		  JOIN
		  	   ROOM R ON (AR.ROOM_NO = R.ROOM_NO)
		 WHERE
		 	   AR.ACCOMM_NO = #{ accommNo }
		 ORDER
		    BY
		       REVIEW_NO DESC
	</select>
	
	<!-- 위시에 추가한 숙소인지 확인 -->
	<select id="checkAcWish" resultMap="acWishResultSet" parameterType="accomm">
		SELECT
			   ACCOMM_NO
			  ,MEM_NO
			  ,WISH_DATE
		  FROM
		  	   ACCOMM_WISH
		 WHERE
		 	   ACCOMM_NO = #{ accommNo }
		   AND
		   	   MEM_NO = #{ memNo }
	</select>
	
	<!-- 숙소 결제 -->
	<insert id="insertRoomPayment" parameterType="roomPayment">
		INSERT
		  INTO
		  	   ROOM_PAYMENT
		  	   (
		  	   ORDER_NO
		  	  ,MEM_NO
		  	  ,START_DATE
		  	  ,END_DATE
		  	  ,HEAD_COUNT
		  	  ,PRICE
		  	  ,ACCOMM_NO
		  	  ,ROOM_NO
		  	   )
		VALUES
			   (
			   SEQ_ORDERNO.NEXTVAL
			  ,#{ memNo }
			  ,#{ startDate }
			  ,#{ endDate }
			  ,#{ headCount }
			  ,#{ price }
			  ,#{ accommNo }
			  ,#{ roomNo}
			   )
	</insert>
	
	<!-- 숙소 검색 -->
	<select id="searchAccomm" resultMap="AccommResultSet" parameterType="accomm">
		SELECT
			   A.ACCOMM_NO
		      ,A.ACCOMM_NAME
		      ,A.CATEGORY
		      ,A.ADDRESS
		      ,LAT
		      ,LNG
		      ,(SELECT COUNT(*) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS REVIEWCOUNT
		      ,(SELECT MIN(PRICE) FROM ROOM WHERE ACCOMM_NO = A.ACCOMM_NO) AS ROWPRICE
		      ,(SELECT AVG(STAR) FROM ACCOMM_REVIEW WHERE ACCOMM_NO = A.ACCOMM_NO) AS AVG
		      ,FILEPATH
		  FROM
		       ACCOMM A
		  JOIN
		       (SELECT 
                      ACCOMM_NO, 
                      MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
                 FROM  
            	      ACCOMM_ATTACHMENT
                GROUP 
            	   BY 
            		  ACCOMM_NO) AT ON (AT.ACCOMM_NO = A.ACCOMM_NO)
		 WHERE
		 	   LOWER(A.ACCOMM_NAME) LIKE LOWER('%' || #{ accommName } || '%')
		   AND
		       <![CDATA[SYSDATE < END_DATE]]> 
		   AND
		   	   STATUS = 'Y'
		<if test="category  != 'all'.toString()">
		   AND
		   	   CATEGORY = #{ category }
		</if>
	</select>
	
	<!-- 액티비티 검색 -->
	<select id="searchActivity" resultMap="ActivityResultSet" parameterType="string">
		SELECT
			   A.ACTIVITY_NO
		      ,A.ACTIVITY_NAME
		      ,(SELECT COUNT(*) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = A.ACTIVITY_NO) AS REVIEWCOUNT
		      ,(SELECT MIN(PRICE) FROM TICKET WHERE ACTIVITY_NO = A.ACTIVITY_NO) AS ROWPRICE
		      ,(SELECT AVG(STAR) FROM ACTIVITY_REVIEW WHERE ACTIVITY_NO = A.ACTIVITY_NO) AS AVG
		      ,FILEPATH
		  FROM
		       ACTIVITY A
		  JOIN
		       (SELECT 
                      ACTIVITY_NO, 
                      MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
                 FROM  
            	      ACTIVITY_ATTACHMENT
                GROUP 
            	   BY 
            		  ACTIVITY_NO) AT ON (AT.ACTIVITY_NO = A.ACTIVITY_NO)
		 WHERE
		 	   LOWER(A.ACTIVITY_NAME) LIKE LOWER('%' || #{ keyword } || '%')
		   AND
		       <![CDATA[SYSDATE < END_DATE]]> 
		   AND
		   	   STATUS = 'Y'
	</select>
	

	<!-- 숙소 조회 -->
	<select id="selectAccommListBu" parameterType="string" resultMap="AccommResultSet">
		SELECT
				ACCOMM_NO,
				ACCOMM_NAME,
				BUSINESS_NO,
				ADDRESS,
				LAT,
				LNG,
				GRADE,
				REFUND,
				CHECKINOUT,
				CASE WHEN 
							<![CDATA[SYSDATE < END_DATE]]>
					 THEN 
					 		TO_CHAR(END_DATE, 'YYYY/MM/DD') 
					 ELSE 
					 		'만료일이 지났습니다 (' || TO_CHAR(END_DATE, 'YYYY/MM/DD') || ')'
					 END AS 
					 		 "END_DATE",
				ACCOMM_CONTENT,
				CATEGORY,
				(
					SELECT
					  		FILE_PATH || CHANGE_NAME
					  FROM 
							ACCOMM_ATTACHMENT
					 WHERE
					 		FILE_NO = (
										SELECT
												MIN(FILE_NO)				 		
							 			  FROM
							 			  		ACCOMM_ATTACHMENT AT
							 			 WHERE
							 			 		AT.ACCOMM_NO = A.ACCOMM_NO
								 	   )
				) 
				AS ATTACHMENT
	  	  FROM
				ACCOMM A
		  WHERE
				BUSINESS_NO = #{ businessNo }
			AND
				STATUS = 'Y'
		  ORDER
		  	 BY
		  	 	ACCOMM_NO DESC
	</select>

	<!-- 숙소에 달린 객실 조회 accommNoList : 숙소 번호가 든 리스트-->
	<select id="selectRoomListBu" parameterType="_int"  resultMap="RoomResultSet">
		SELECT 
				ROOM_NO, 
				ACCOMM_NO, 
				ROOM_NAME, 
				CAPACITY, 
				PRICE,
				STATUS
		   FROM 
		   		ROOM 
		  WHERE 
		  		ACCOMM_NO = #{accommNo}
			AND
				STATUS = 'Y'		    
	
	</select>
	
	<!-- 액티비티 조회와 거기 딸린 ACTIVITY_ATTACHMENT 붙여오기 -->
	<select id="selectActivityListBu" parameterType="string" resultMap="ActivityResultSet">
		SELECT
				ACTIVITY_NO,
				ACTIVITY_NAME,
				BUSINESS_NO,
				CASE WHEN 
							END_DATE > SYSDATE 
					 THEN 
					 		TO_CHAR(END_DATE, 'YYYY/MM/DD') 
					 ELSE 
					 		'만료일이 지났습니다 (' || TO_CHAR(END_DATE, 'YYYY/MM/DD') || ')'
					 END AS 
					 		 "END_DATE",
				ACTIVITY_CONTENT,
				(
					SELECT
					  		FILE_PATH || CHANGE_NAME
					  FROM 
							ACTIVITY_ATTACHMENT
					 WHERE
					 		FILE_NO = (
										SELECT
												MIN(FILE_NO)				 		
							 			  FROM
							 			  		ACTIVITY_ATTACHMENT AT
							 			 WHERE
							 			 		AT.ACTIVITY_NO = A.ACTIVITY_NO
								 	   )
				) 
				AS ATTACHMENT
	  	  FROM
				ACTIVITY A
		  WHERE
				BUSINESS_NO = #{ businessNo }
			AND
				STATUS = 'Y'				
  		  ORDER
		  	 BY
		  	 	ACTIVITY_NO DESC
	</select>
	
	
	
	<!-- 액티비티에 달린 티켓 조회 + 예약자 수 조회 / actNoList : 액티비티 번호가 든 리스트-->
	<select id="selectTicketListBu" parameterType="_int"  resultMap="TicketResultSet">
		SELECT 
				TICKET_NO, 
				ACTIVITY_NO, 
				TICKET_NAME, 
				CAPACITY, 
				PRICE,
				START_DATE,
				END_DATE,
				(
					SELECT 	
							COUNT
					  FROM
					  		TICKET_PAYMENT TP
					 WHERE
					 		TP.TICKET_NO = T.TICKET_NO
				
				) AS COUNT
		   FROM 
		   		TICKET T
		  WHERE 
		  		ACTIVITY_NO = #{activityNo}
			AND
				STATUS = 'Y'
	
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 숙소 집어넣기 -->
	<insert id="insertAccom" parameterType="accomm">
		INSERT
		  INTO
		        ACCOMM
		        (
		        ACCOMM_NO,
		        BUSINESS_NO,
		        ACCOMM_NAME,
		        ADDRESS,
		        LAT,
		        LNG,
		        GRADE,
		        REFUND,
		        CHECKINOUT,
		        END_DATE,
		        ACCOMM_CONTENT,
		        CATEGORY
		        )
		VALUES
		        (
		        SEQ_ACCNO.NEXTVAL,        
		        #{businessNo},
		        #{accommName},
		        #{address},
		        #{lat},
		        #{lng},
		        #{grade},
		        #{refund},
		        #{checkInout},
		        SYSDATE,
		        #{accommContent},
		        #{category}
		        )
	</insert>
	
	<!-- 숙소 첨부파일 집어넣기 --> 
	<insert  id="insertAccomPhoto"   parameterType="java.util.List" >
	  INSERT
		  INTO
		        ACCOMM_ATTACHMENT
		        (
		        FILE_NO,
		        ACCOMM_NO,
		        ORIGIN_NAME,
		        CHANGE_NAME,
		        FILE_PATH,
		        UPLOAD_DATE
		        )
	  SELECT 
				SEQ_ACCFNO.NEXTVAL, 
				SEQ_ACCNO.CURRVAL,
				 A.* 
				 FROM (
			
	 			<foreach collection="list" item="item"    separator="UNION ALL ">
						SELECT
							     #{item.originName} AS ORIGIN_NAME,
							     #{item.changeName} AS CHANGE_NAME,
							     #{item.filePath} AS FILE_PATH,
							     SYSDATE AS UPLOAD_DATE
						   FROM
			   					 DUAL
				</foreach>
						   ) A
	</insert>
	
	<!-- 액티비티 인서트으!! -->
	<insert id="insertAct" parameterType="activity">
		INSERT
		  INTO
		        ACTIVITY
		        (
		        ACTIVITY_NO,
		        BUSINESS_NO,
		        ACTIVITY_NAME,
		        ACTIVITY_CONTENT,
		        END_DATE
		        )
		VALUES
		        (
		        SEQ_ACTNO.NEXTVAL,        
		        #{businessNo},
		        #{activityName},
		        #{activityContent},
		        SYSDATE
		        )
	</insert>
	
	<!-- 액티비티 첨부파일 집어넣기 --> 
	<insert  id="insertActPhoto"   parameterType="java.util.List" >
	  INSERT
		INTO
		        ACTIVITY_ATTACHMENT
		        (
		        FILE_NO,
		        ACTIVITY_NO,
		        ORIGIN_NAME,
		        CHANGE_NAME,
		        FILE_PATH,
		        UPLOAD_DATE
		        )
	  SELECT 
				SEQ_ACTFNO.NEXTVAL, 
				SEQ_ACTNO.CURRVAL,
				 A.* 
				 FROM (
			
	 			<foreach collection="list" item="item" separator="UNION ALL ">
						SELECT
							     #{item.originName} AS ORIGIN_NAME,
							     #{item.changeName} AS CHANGE_NAME,
							     #{item.filePath} AS FILE_PATH,
							     SYSDATE AS UPLOAD_DATE
						   FROM
			   					 DUAL
				</foreach>
						   ) A
	</insert>
	
	<!-- 객실 집어넣기 -->
	<insert id="insertRoom" parameterType="room">
		INSERT
		  INTO
		        ROOM
		        (
		        ROOM_NO,
		        ACCOMM_NO,
		        ROOM_NAME,
		        CAPACITY,
		        PRICE
		 
		        )
		VALUES
		        (
		        SEQ_RMNO.NEXTVAL,        
		        #{accommNo},
		        #{roomName},
		        #{capacity},
		        #{price}
		        )
	</insert>
	
	<!-- 객실 첨부파일 집어넣기 --> 
	<insert  id="insertRoomPhoto"   parameterType="java.util.List" >
	  	INSERT
		  INTO
		        ROOM_ATTACHMENT
		        (
		        FILE_NO,
		        ROOM_NO,
		        ORIGIN_NAME,
		        CHANGE_NAME,
		        FILE_PATH,
		        UPLOAD_DATE
		        )
	  SELECT 
				SEQ_RMFNO.NEXTVAL, 
				SEQ_RMNO.CURRVAL,
				 A.* 
				 FROM (
			
	 			<foreach collection="list" item="item" separator="UNION ALL ">
						SELECT
							     #{item.originName} AS ORIGIN_NAME,
							     #{item.changeName} AS CHANGE_NAME,
							     #{item.filePath} AS FILE_PATH,
							     SYSDATE AS UPLOAD_DATE
					      FROM
		   					  	 DUAL
				</foreach>
						  ) A
	</insert>
	
	<!-- 티켓 집어넣기 -->
	<insert id="insertTicket" parameterType="ticket">
		INSERT
		  INTO
		        TICKET
		        (
		        TICKET_NO,
		        ACTIVITY_NO,
		        TICKET_NAME,
		        CAPACITY,
		        PRICE,
		        START_DATE,
		        END_DATE
		 
		        )
		VALUES
		        (
		        SEQ_TNO.NEXTVAL,        
		        #{activityNo},
		        #{ticketName},
		        #{capacity},
		        #{price},
		        #{startDate},
		        #{endDate}
		        )
	</insert>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ인호 끝ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


</mapper>