<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	
	<resultMap id="memberResultSet" type="member">
		<result column="MEM_NO"			property="memNo" />
		<result column="MEM_ID" 		property="memId" />
		<result column="MEM_PWD" 		property="memPwd" />
		<result column="MEM_NAME" 		property="memName" />
		<result column="EMAIL" 			property="email" />
		<result column="PHONE" 			property="phone" />
		<result column="STATUS" 		property="status" />
		<result column="MEM_ENROLLDATE" property="memEnrollDate" />
		<result column="REPORT_COUNT" 	property="reportCount" />
	</resultMap>

 <!-- 여기는 승준 -->
	<select id="loginMember" parameterType="member" resultMap="memberResultSet">
		select
				mem_no,
				mem_id,
				mem_pwd,
				mem_name,
				email,
				phone,
				status,
				mem_enrolldate,
				report_count
		 from
		 		member
		where
				mem_id = #{memId}
		  and
		  		(status = 'Y' or status = 'A')
	</select>
	
	<insert id="insertMember" parameterType="member">
		insert
		  into
		  		member
		  		(
		  		mem_no,
		  		mem_id,
		  		mem_pwd,
		  		mem_name,
		  		email,
		  		phone
		  		)
		values
				(
				seq_memNo.nextval,
				#{ memId },
				#{ memPwd },
				#{ memName },
				#{ email },
				#{ phone }
				)
	</insert>	
		<!-- 이메일 인증번호 보낼때 회원의 ip,인증번호,인증번호제한시간  -->
		<insert id="insertSecret" parameterType="cert">
		INSERT 
		  INTO
		  		CERT
				(
				WHO,
				SECRET,
				WHEN
				)
		VALUES
				(
				#{who},
				#{secret},
				sysdate
				)
	</insert>
	
	<select id="validate" parameterType="cert" resultType="cert">
		select
				*
		  from
		  		cert
		 where
		 		who = #{ who }
		   and
		   		secret = #{secret}
		   and
		   		when between sysdate - 3/24/60 and sysdate		
	</select>
	
	<delete id="remove" parameterType="cert">
		delete
				cert
	 	 where
	 	 		who = #{who} 
	 	   and
	 	   		secret = #{secret}
	</delete>
	
	<!-- 아이디 중복체크 -->
	<select id="idCheck" resultType="_int">
		select
				count(*)
		  from
		  		member
		 where
		 		mem_Id = #{ checkId }
	</select>
	
	
	<select id="findId" parameterType="member" resultMap="memberResultSet" >
		select
				mem_id
		  from
				member
	     where
	     		mem_name = #{ memName}
	       and
	       		email =#{ email }
	       and
	       		status = 'Y'			  		
	</select>
	 
	<select id="findPwd" parameterType="member" resultMap="memberResultSet">
		select
				mem_no,
				mem_pwd,
				email
		  from
		  		member
		 where
		 		mem_name = #{ memName }
		   and
		   		mem_id = #{ memId }
		   and
		   		email = #{ email }
		 	
	</select>
	
	<update id="updatePwd" parameterType="member">
		update 
				member
		   set
		   		mem_pwd = #{ memPwd }
		 where
		 		mem_id = #{ memId }
	</update>
	
	
	<!-- 여기부터 혜진 -->
	<select id="checkPwd" parameterType="member" resultType="string">
	SELECT 
			MEM_PWD
	FROM
		MEMBER
	WHERE 
		MEM_ID = #{ memId }
	</select>
	<update id="memberUpdatePwd" parameterType="member">
		UPDATE 
			  MEMBER
		SET
			MEM_PWD = #{ memPwd }
		WHERE 
			MEM_ID = #{ memId }
	</update>
	<update id="memberUpdate" parameterType="member">
		UPDATE 
			  MEMBER
		SET
			EMAIL = #{ email },
			PHONE = #{ phone }
		WHERE 
			MEM_ID = #{ memId }
	</update>
	<select id="wishAccommList" parameterType="_int" resultType="AccommWish">			
		SELECT 
        		ACCOMM_NO accommNo,
        		ACCOMM_NAME accommName,
                FILEPATH 
                
		FROM 
			ACCOMM_WISH
		JOIN 
			ACCOMM USING(ACCOMM_NO)
        JOIN 
            (SELECT 
                    ACCOMM_NO, 
                    MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
            FROM  
            	ACCOMM_ATTACHMENT
            GROUP 
            	BY 
            		ACCOMM_NO) USING(ACCOMM_NO)    
		WHERE 
			MEM_NO = #{ memNo }
		ORDER 
			BY 
				WISH_DATE DESC
	</select>
	<delete id="deleteWishAccomm"  parameterType="accommwish">
	DELETE 
			ACCOMM_WISH 
		WHERE
			MEM_NO = #{ memNo }
		AND
			ACCOMM_NO = #{ accommNo }
	</delete>
	<select id="wishActivityList" parameterType="_int" resultType="ActivityWish">
			SELECT 
        		ACTIVITY_NO activityNo,
        		ACTIVITY_NAME activityName,
       			FILEPATH
		FROM 
			ACTIVITY_WISH
		JOIN 
			ACTIVITY USING(ACTIVITY_NO)
		JOIN 
            (SELECT 
                    ACTIVITY_NO, 
                    MIN(FILE_PATH||CHANGE_NAME) AS FILEPATH
            FROM  
            	ACTIVITY_ATTACHMENT
            GROUP 
            	BY 
            		ACTIVITY_NO) USING(ACTIVITY_NO)
		WHERE 
			MEM_NO = #{ memNo }
		ORDER 
			BY 
				WISH_DATE DESC
	</select>
	<delete id="deleteWishActivity" parameterType="activitywish">
		DELETE 
			ACTIVITY_WISH 
		WHERE
			MEM_NO = #{ memNo }
		AND
			ACTIVITY_NO = #{ activityNo }
	</delete>
	<select id="plannerList" parameterType="_int" resultType="planner">
	SELECT 
		PLANNER_NO plannerNo, 
		PLANNER_NAME plannerName, 
		TO_CHAR(START_DATE, 'YY/MM/DD') startDate,
		TO_CHAR(END_DATE,'YY/MM/DD') endDate 
	FROM 
		PLANNER
	JOIN 
		PLANNER_MEM USING(PLANNER_NO)
	WHERE 
		MEM_NO = #{ memNo }
	ORDER 
		BY 
			START_DATE DESC
	</select>
	<insert id="insertPlanner" parameterType="planner">
		INSERT 
				INTO 
					PLANNER 
			VALUES (
					SEQ_PLANNO.NEXTVAL
					, #{ plannerName }
					, #{ startDate }
					, #{ endDate }
					)
	</insert>
	<insert id="insertPlannerMem" parameterType="_int">
		INSERT 
				INTO
					PLANNER_MEM
			VALUES	(
					SEQ_PLANNO.CURRVAL
					, #{ memNo }
					)
	</insert>
	<select id="selectPlanner" parameterType="planner" resultType="planner">
	SELECT DISTINCT
			PLANNER_NO plannerNo,
	        PLANNER_NAME plannerName,
	        '20' || REPLACE(SUBSTR(START_DATE,1,10), '/', '-' ) startDate,
	        '20' || REPLACE(SUBSTR(END_DATE,1,10), '/', '-') endDate,
	        (WITH MEM AS (
				            SELECT 
				                    MEM_NAME memNo 
				            FROM 
				                MEMBER 
				            JOIN 
				                PLANNER_MEM USING(MEM_NO) 
				            WHERE 
				                PLANNER_NO = #{ plannerNo }
	        			)
	        SELECT LISTAGG(memNo, ',') WITHIN GROUP (ORDER BY memNo) FROM MEM)memName
	      
			FROM 
			    PLAN
			RIGHT OUTER JOIN 
			    PLANNER USING(PLANNER_NO)
			JOIN 
			    PLANNER_MEM USING(PLANNER_NO)
			JOIN 
			    MEMBER USING(MEM_NO)
			WHERE 
			    PLANNER_NO = #{ plannerNo }
            	AND
            MEM_NO = #{ memNo }
	</select>
	<update id="updatePlanner" parameterType="planner">
	UPDATE
		PLANNER
	SET
		PLANNER_NAME = #{ plannerName }
		, START_DATE = #{ startDate }
		, END_DATE = #{ endDate }
	WHERE 
		PLANNER_NO = #{ plannerNo }
	</update>
	<select id="planDetailView" parameterType="_int" resultType="plan">
	SELECT DISTINCT
			PLANNER_NO plannerNo,
	        PLANNER_NAME plannerName,
	        PLAN_NO planNo,
	        PLAN_NAME planName,
	        PLAN_CONTENT planContent,
	        START_TIME startTime,
	        END_TIME endTime,
	        '20' || REPLACE(SUBSTR(START_DATE,1,10), '/', '-' ) startDate,
	        '20' || REPLACE(SUBSTR(END_DATE,1,10), '/', '-') endDate,
	        PLAN_CATEGORY planCategory,
	        SUBSTR(PLAN_DATE,4,10) planDate,
	        (WITH MEM AS (
				            SELECT 
				                    MEM_NAME memNo 
				            FROM 
				                MEMBER 
				            JOIN 
				                PLANNER_MEM USING(MEM_NO) 
				            WHERE 
				                PLANNER_NO = #{ plannerNo }
	        			)
	        SELECT LISTAGG(memNo, ',') WITHIN GROUP (ORDER BY memNo) FROM MEM)memName
	      
			FROM 
			    PLAN
			JOIN 
			    PLANNER USING(PLANNER_NO)
			JOIN 
			    PLANNER_MEM USING(PLANNER_NO)
			JOIN 
			    MEMBER USING(MEM_NO)
			WHERE 
			    PLANNER_NO = #{ plannerNo }
			ORDER 
				BY
					planDate ASC, startTime ASC
					
	</select>
	<select id="planMemSelect" parameterType="plannerMem" resultType="_int">
	SELECT
			COUNT(*)
	FROM
		PLANNER_MEM
	WHERE
		PLANNER_NO = #{ plannerNo }
	AND
		MEM_NO = (SELECT 
						MEM_NO
					FROM 
						MEMBER
					WHERE 
						MEM_ID = #{ memId })
	</select>
	<insert id="planAddMem" parameterType="plannerMem">
	INSERT 
		  INTO
		  		PLANNER_MEM
			VALUES 
					(
						#{ plannerNo }
						, (SELECT 
								MEM_NO
							FROM 
								MEMBER
							WHERE 
								MEM_ID = #{ memId })
					)
	</insert>
	<insert id="insertPlan" parameterType="plan">
	INSERT 
		  INTO
		  		PLAN (
		  				PLAN_NO
		  				,PLANNER_NO
		  				,PLAN_NAME
		  				,PLAN_CONTENT
		  				,START_TIME
		  				,END_TIME
		  				,PLAN_CATEGORY
		  				,PLAN_DATE
		  				)
		  			VALUES (
		  					SEQ_PLNO.NEXTVAL
		  					, #{ plannerNo }
		  					, #{ planName }
		  					, #{ planContent }
		  					, #{ startTime }
		  					, #{ endTime }
		  					, #{ planCategory }
		  					, REPLACE(SUBSTR(#{ planDate }, 3, 10), '-', '/')
		  					)
	</insert>
	<select id="selectPlan" parameterType="_int" resultType="plan">
	SELECT 
		    PLAN_NO planNo,
		    PLANNER_NO plannerNo,
		    PLAN_NAME planName,
		    PLAN_CONTENT planContent,
		    START_TIME startTime,
		    END_TIME endTime,
		    PLAN_CATEGORY planCategory,
		    '20' || REPLACE(SUBSTR(PLAN_DATE,1,10), '/', '-') planDate
	FROM 
	    PLAN
	WHERE 
	    PLAN_NO = #{ planNo }
	</select>
	<update id="updatePlan" parameterType="plan">
	UPDATE
			PLAN
		SET
  				PLAN_NAME = #{ planName }
  				,PLAN_CONTENT = #{ planContent }
  				,START_TIME = #{ startTime }
  				,END_TIME = #{ endTime }
  				,PLAN_CATEGORY = #{ planCategory }
  				,PLAN_DATE = REPLACE(SUBSTR(#{ planDate }, 3, 10), '-', '/')
  	WHERE
  		PLAN_NO = #{ planNo }
	</update>
	<delete id="deletePlan">
	DELETE
		FROM
			PLAN
	WHERE
		PLAN_NO = #{ planNo }		
	</delete>
	<select id="expenseView" parameterType="_int" resultType="expense">
	SELECT EXPENSE_NO expenseNo
	        ,PLANNER_NO plannerNo
	        ,AMOUNT amount
	        ,METHOD method
	        ,TO_CHAR(EXPENSE_DATE, 'YY/MM/DD') expenseDate
	        ,EXPENSE_CONTENT expenseContent
	        ,EXPENSE_CATEGORY expenseCategory
		FROM 
			EXPENSE
		WHERE 
			PLANNER_NO = #{ plannerNo }
		ORDER 
				BY expenseDate ASC
					
	</select>
	<select id="dutchTreat" parameterType="_int" resultType="expense">

	SELECT  DISTINCT
        NVL((SELECT 
                    SUM(AMOUNT)
               FROM 
                    EXPENSE 
              WHERE 
              		PLANNER_NO = #{ plannerNo}),0 ) "all",
         NVL(( SELECT 
                    SUM(AMOUNT) 
                FROM 
                    EXPENSE
                WHERE     
                    EXPENSE_CATEGORY = '숙소' 
               AND PLANNER_NO = #{ plannerNo}),0 ) "accomm",
         NVL(( SELECT 
                    SUM(AMOUNT)
                FROM 
                    EXPENSE
                WHERE
                    EXPENSE_CATEGORY = '식비'   
                AND 
                	PLANNER_NO = #{ plannerNo}),0) "eat",
         NVL(( SELECT 
                    SUM(AMOUNT)
                FROM 
                    EXPENSE
                WHERE
                    EXPENSE_CATEGORY = '관광'   
                AND 
                	PLANNER_NO = #{ plannerNo}),0) "tour",
         NVL(( SELECT 
                    SUM(AMOUNT)
                FROM 
                    EXPENSE
                WHERE 
                    EXPENSE_CATEGORY = '쇼핑'   
                 AND 
                 	PLANNER_NO = #{ plannerNo}),0) "shopping",
         NVL(( SELECT 
                    SUM(AMOUNT)
                FROM 
                    EXPENSE
                WHERE 
                    EXPENSE_CATEGORY = '교통'   
                AND 
                	PLANNER_NO = #{ plannerNo}),0) "transport",
         NVL(( SELECT 
                    SUM(AMOUNT)
                FROM 
                    EXPENSE
                WHERE 
                    EXPENSE_CATEGORY = '기타'
                AND 
                	PLANNER_NO = #{ plannerNo}),0) "other",
        (SELECT
                COUNT(*)
            FROM
                PLANNER_MEM
            WHERE 
                PLANNER_NO = #{ plannerNo}) "memCount"
        
	FROM EXPENSE
	</select>
	<insert id="insertExpense" parameterType="expense">
	INSERT 
		INTO
			EXPENSE (
					EXPENSE_NO
					, PLANNER_NO
					, AMOUNT
					, METHOD
					, EXPENSE_DATE
					, EXPENSE_CONTENT
					, EXPENSE_CATEGORY
					)
			VALUES	(
					SEQ_EXPNO.NEXTVAL
					, #{ plannerNo }
					, #{ amount }
					, #{ method }
					, #{ expenseDate }
					, #{ expenseContent }
					, #{ expenseCategory }
					)
	</insert>
	<delete id="deleteExpense" parameterType="expense">
	DELETE
		FROM EXPENSE
	WHERE 
		EXPENSE_NO = #{ expenseNo }
	AND
		PLANNER_NO = #{ plannerNo }
	</delete>
	
	
	
	
	
	
	<!-- 액티비티 위시리스트 추가 -->
	<insert id="addActWish" parameterType="activityWish">
		INSERT
		  INTO
		  	   ACTIVITY_WISH
		  	   (
		  	    ACTIVITY_NO
		  	   ,MEM_NO
		  	   )
		VALUES
			   (
			    #{ activityNo }
			   ,#{ memNo }
			   )
	</insert>
	
	<!-- 액티비티 위시리스트 삭제 -->
	<delete id="removeActWish" parameterType="activityWish">
		DELETE
		  FROM
		  	   ACTIVITY_WISH
		 WHERE
	 	       ACTIVITY_NO = #{ activityNo }
	 	   AND
	 	   	   MEM_NO = #{ memNo }
	</delete>
	
	<!-- 숙소 위시리스트 추가 -->
	<insert id="addAcWish" parameterType="accommwish">
		INSERT
		  INTO
		  	   ACCOMM_WISH
		  	   (
		  	    ACCOMM_NO
		  	   ,MEM_NO
		  	   )
		VALUES
			   (
			    #{ accommNo }
			   ,#{ memNo }
			   )
	</insert>
	
	<!-- 숙소 위시리스트 삭제 -->
	<delete id="removeAcWish" parameterType="accommwish">
		DELETE
		  FROM
		  	   ACCOMM_WISH
		 WHERE
	 	       ACCOMM_NO = #{ accommNo }
	 	   AND
	 	   	   MEM_NO = #{ memNo }
	</delete>
	
</mapper>
